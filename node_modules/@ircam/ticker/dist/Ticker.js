'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Create a function that returns time in milliseconds according to the current
 * environment (node or browser).
 * If running in node the time rely on `process.hrtime`, while if in the browser
 * it is provided by the `performance.now`. In last resort, `Date.now()` is used.
 *
 * @return {Function}
 * @private
 */
function getTimeFunction() {
  var audioContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  if (typeof process !== 'undefined' && typeof process.hrtime === 'function') {
    return function () {
      var t = process.hrtime();
      return (t[0] + t[1] * 1e-9) * 1e3;
    };
  } else if (typeof self !== 'undefined' && typeof self.performance !== 'undefined' && typeof self.performance.now === 'function') {
    return function () {
      return performance.now();
    };
  } else {
    return function () {
      return Date.now();
    };
  }
}

/**
 * @callback TickerCallback
 * @param {Number} logicalTime - logical time since `start` in ms
 * @param {Number} currentTime - current time as returned by `performance.now`
 * @param {Number} error - current error
 */

/**
 * Precise periodic timer (based on `setTimeout`) that monitor and adapt itself
 * to stay close to the given therical period. In particular, try to minimize
 * the drift caused by the use of a raw `setTimeout`.
 * Observed average jitter is around +/- 2ms.
 *
 * @param {Number} period - period of the timer interval in milliseconds
 *  (floored if float is given)
 * @param {TickerCallback} callback - callback to execute on each tick
 * @param {Object} options - additionnal options
 * @param {Number} [options.errorThreshold] - Threshold error where the timer
 *  considers itself as out of bounds. Increasing this value tends to increase
 *  the overall jitter.
 */

var Ticker = function () {
  function Ticker(period, callback) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$errorThreshold = _ref.errorThreshold,
        errorThreshold = _ref$errorThreshold === undefined ? 0.4 : _ref$errorThreshold;

    _classCallCheck(this, Ticker);

    period = Math.floor(period);

    this.logicalPeriod = period;
    this.computedPeriod = period;
    this.callback = callback;
    this.errorThreshold = errorThreshold;
    this.isRunning = false;
    this.getTime = getTimeFunction();

    this._tick = this._tick.bind(this);
  }

  /**
   * Period of the timer. Must be an integer, the given value is floored.
   * When updated the new value is applied at the next tick.
   *
   * @name period
   * @type {Number}
   * @instance
   * @memberof Ticker
   */


  _createClass(Ticker, [{
    key: 'start',


    /**
     * Start the ticker instance.
     */
    value: function start() {
      if (!this.isRunning) {
        this.startTime = this.getTime();
        this.logicalTime = 0;

        this._tick(); // run now

        this.isRunning = true;
      }
    }

    /**
     * Stop the ticker instance.
     */

  }, {
    key: 'stop',
    value: function stop() {
      clearTimeout(this.timeoutId);
      this.isRunning = false;
    }

    /** @private */

  }, {
    key: '_tick',
    value: function _tick() {
      var now = this.getTime();
      var time = now - this.startTime;
      var error = time - this.logicalTime;

      if (error >= this.errorThreshold) this.computedPeriod = this.computedPeriod - 1;

      if (error < -this.errorThreshold) this.computedPeriod = this.logicalPeriod;

      this.timeoutId = setTimeout(this._tick, this.computedPeriod);

      this.callback(this.logicalTime, now, error);
      // next call time
      this.logicalTime += this.logicalPeriod;
    }
  }, {
    key: 'period',
    set: function set(value) {
      value = Math.floor(value);
      this.logicalPeriod = value;
      this.computedPeriod = value;
    },
    get: function get() {
      return this.logicalPeriod;
    }
  }]);

  return Ticker;
}();

exports.default = Ticker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpY2tlci5qcyJdLCJuYW1lcyI6WyJnZXRUaW1lRnVuY3Rpb24iLCJhdWRpb0NvbnRleHQiLCJwcm9jZXNzIiwiaHJ0aW1lIiwidCIsInNlbGYiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIkRhdGUiLCJUaWNrZXIiLCJwZXJpb2QiLCJjYWxsYmFjayIsImVycm9yVGhyZXNob2xkIiwiTWF0aCIsImZsb29yIiwibG9naWNhbFBlcmlvZCIsImNvbXB1dGVkUGVyaW9kIiwiaXNSdW5uaW5nIiwiZ2V0VGltZSIsIl90aWNrIiwiYmluZCIsInN0YXJ0VGltZSIsImxvZ2ljYWxUaW1lIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dElkIiwidGltZSIsImVycm9yIiwic2V0VGltZW91dCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7OztBQVNBLFNBQVNBLGVBQVQsR0FBOEM7QUFBQSxNQUFyQkMsWUFBcUIsdUVBQU4sSUFBTTs7QUFDNUMsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLElBQWtDLE9BQU9BLFFBQVFDLE1BQWYsS0FBMEIsVUFBaEUsRUFBNEU7QUFDMUUsV0FBTyxZQUFNO0FBQ1gsVUFBTUMsSUFBSUYsUUFBUUMsTUFBUixFQUFWO0FBQ0EsYUFBTyxDQUFDQyxFQUFFLENBQUYsSUFBT0EsRUFBRSxDQUFGLElBQU8sSUFBZixJQUF1QixHQUE5QjtBQUNELEtBSEQ7QUFJRCxHQUxELE1BS08sSUFBRyxPQUFPQyxJQUFQLEtBQWdCLFdBQWhCLElBQ0csT0FBT0EsS0FBS0MsV0FBWixLQUE0QixXQUQvQixJQUVHLE9BQU9ELEtBQUtDLFdBQUwsQ0FBaUJDLEdBQXhCLEtBQWdDLFVBRnRDLEVBRWtEO0FBQ3ZELFdBQU87QUFBQSxhQUFNRCxZQUFZQyxHQUFaLEVBQU47QUFBQSxLQUFQO0FBQ0QsR0FKTSxNQUlBO0FBQ0wsV0FBTztBQUFBLGFBQU1DLEtBQUtELEdBQUwsRUFBTjtBQUFBLEtBQVA7QUFDRDtBQUNGOztBQUVEOzs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7OztJQWNNRSxNO0FBQ0osa0JBQVlDLE1BQVosRUFBb0JDLFFBQXBCLEVBQTZEO0FBQUEsbUZBQUosRUFBSTtBQUFBLG1DQUE3QkMsY0FBNkI7QUFBQSxRQUE3QkEsY0FBNkIsdUNBQVosR0FBWTs7QUFBQTs7QUFDM0RGLGFBQVNHLEtBQUtDLEtBQUwsQ0FBV0osTUFBWCxDQUFUOztBQUVBLFNBQUtLLGFBQUwsR0FBcUJMLE1BQXJCO0FBQ0EsU0FBS00sY0FBTCxHQUFzQk4sTUFBdEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLGNBQUwsR0FBc0JBLGNBQXRCO0FBQ0EsU0FBS0ssU0FBTCxHQUFpQixLQUFqQjtBQUNBLFNBQUtDLE9BQUwsR0FBZWxCLGlCQUFmOztBQUVBLFNBQUttQixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXQyxJQUFYLENBQWdCLElBQWhCLENBQWI7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBOzs7NEJBR1E7QUFDTixVQUFJLENBQUMsS0FBS0gsU0FBVixFQUFxQjtBQUNuQixhQUFLSSxTQUFMLEdBQWlCLEtBQUtILE9BQUwsRUFBakI7QUFDQSxhQUFLSSxXQUFMLEdBQW1CLENBQW5COztBQUVBLGFBQUtILEtBQUwsR0FKbUIsQ0FJTDs7QUFFZCxhQUFLRixTQUFMLEdBQWlCLElBQWpCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7OzJCQUdPO0FBQ0xNLG1CQUFhLEtBQUtDLFNBQWxCO0FBQ0EsV0FBS1AsU0FBTCxHQUFpQixLQUFqQjtBQUNEOztBQUVEOzs7OzRCQUNRO0FBQ04sVUFBTVYsTUFBTSxLQUFLVyxPQUFMLEVBQVo7QUFDQSxVQUFNTyxPQUFPbEIsTUFBTSxLQUFLYyxTQUF4QjtBQUNBLFVBQU1LLFFBQVFELE9BQU8sS0FBS0gsV0FBMUI7O0FBRUEsVUFBSUksU0FBUyxLQUFLZCxjQUFsQixFQUNFLEtBQUtJLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxHQUFzQixDQUE1Qzs7QUFFRixVQUFJVSxRQUFRLENBQUMsS0FBS2QsY0FBbEIsRUFDRSxLQUFLSSxjQUFMLEdBQXNCLEtBQUtELGFBQTNCOztBQUVGLFdBQUtTLFNBQUwsR0FBaUJHLFdBQVcsS0FBS1IsS0FBaEIsRUFBdUIsS0FBS0gsY0FBNUIsQ0FBakI7O0FBRUEsV0FBS0wsUUFBTCxDQUFjLEtBQUtXLFdBQW5CLEVBQWdDZixHQUFoQyxFQUFxQ21CLEtBQXJDO0FBQ0E7QUFDQSxXQUFLSixXQUFMLElBQW9CLEtBQUtQLGFBQXpCO0FBQ0Q7OztzQkFqRFVhLEssRUFBTztBQUNoQkEsY0FBUWYsS0FBS0MsS0FBTCxDQUFXYyxLQUFYLENBQVI7QUFDQSxXQUFLYixhQUFMLEdBQXFCYSxLQUFyQjtBQUNBLFdBQUtaLGNBQUwsR0FBc0JZLEtBQXRCO0FBQ0QsSzt3QkFFWTtBQUNYLGFBQU8sS0FBS2IsYUFBWjtBQUNEOzs7Ozs7a0JBNENZTixNIiwiZmlsZSI6IlRpY2tlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGFjY29yZGluZyB0byB0aGUgY3VycmVudFxuICogZW52aXJvbm1lbnQgKG5vZGUgb3IgYnJvd3NlcikuXG4gKiBJZiBydW5uaW5nIGluIG5vZGUgdGhlIHRpbWUgcmVseSBvbiBgcHJvY2Vzcy5ocnRpbWVgLCB3aGlsZSBpZiBpbiB0aGUgYnJvd3NlclxuICogaXQgaXMgcHJvdmlkZWQgYnkgdGhlIGBwZXJmb3JtYW5jZS5ub3dgLiBJbiBsYXN0IHJlc29ydCwgYERhdGUubm93KClgIGlzIHVzZWQuXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRUaW1lRnVuY3Rpb24oYXVkaW9Db250ZXh0ID0gbnVsbCkge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLmhydGltZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCB0ID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICAgIHJldHVybiAodFswXSArIHRbMV0gKiAxZS05KSAqIDFlMztcbiAgICB9XG4gIH0gZWxzZSBpZih0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICYmIHR5cGVvZiBzZWxmLnBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgJiYgdHlwZW9mIHNlbGYucGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoKSA9PiBEYXRlLm5vdygpO1xuICB9XG59XG5cbi8qKlxuICogQGNhbGxiYWNrIFRpY2tlckNhbGxiYWNrXG4gKiBAcGFyYW0ge051bWJlcn0gbG9naWNhbFRpbWUgLSBsb2dpY2FsIHRpbWUgc2luY2UgYHN0YXJ0YCBpbiBtc1xuICogQHBhcmFtIHtOdW1iZXJ9IGN1cnJlbnRUaW1lIC0gY3VycmVudCB0aW1lIGFzIHJldHVybmVkIGJ5IGBwZXJmb3JtYW5jZS5ub3dgXG4gKiBAcGFyYW0ge051bWJlcn0gZXJyb3IgLSBjdXJyZW50IGVycm9yXG4gKi9cblxuLyoqXG4gKiBQcmVjaXNlIHBlcmlvZGljIHRpbWVyIChiYXNlZCBvbiBgc2V0VGltZW91dGApIHRoYXQgbW9uaXRvciBhbmQgYWRhcHQgaXRzZWxmXG4gKiB0byBzdGF5IGNsb3NlIHRvIHRoZSBnaXZlbiB0aGVyaWNhbCBwZXJpb2QuIEluIHBhcnRpY3VsYXIsIHRyeSB0byBtaW5pbWl6ZVxuICogdGhlIGRyaWZ0IGNhdXNlZCBieSB0aGUgdXNlIG9mIGEgcmF3IGBzZXRUaW1lb3V0YC5cbiAqIE9ic2VydmVkIGF2ZXJhZ2Ugaml0dGVyIGlzIGFyb3VuZCArLy0gMm1zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBwZXJpb2QgLSBwZXJpb2Qgb2YgdGhlIHRpbWVyIGludGVydmFsIGluIG1pbGxpc2Vjb25kc1xuICogIChmbG9vcmVkIGlmIGZsb2F0IGlzIGdpdmVuKVxuICogQHBhcmFtIHtUaWNrZXJDYWxsYmFja30gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBleGVjdXRlIG9uIGVhY2ggdGlja1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhZGRpdGlvbm5hbCBvcHRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZXJyb3JUaHJlc2hvbGRdIC0gVGhyZXNob2xkIGVycm9yIHdoZXJlIHRoZSB0aW1lclxuICogIGNvbnNpZGVycyBpdHNlbGYgYXMgb3V0IG9mIGJvdW5kcy4gSW5jcmVhc2luZyB0aGlzIHZhbHVlIHRlbmRzIHRvIGluY3JlYXNlXG4gKiAgdGhlIG92ZXJhbGwgaml0dGVyLlxuICovXG5jbGFzcyBUaWNrZXIge1xuICBjb25zdHJ1Y3RvcihwZXJpb2QsIGNhbGxiYWNrLCB7IGVycm9yVGhyZXNob2xkID0gMC40IH0gPSB7fSkge1xuICAgIHBlcmlvZCA9IE1hdGguZmxvb3IocGVyaW9kKTtcblxuICAgIHRoaXMubG9naWNhbFBlcmlvZCA9IHBlcmlvZDtcbiAgICB0aGlzLmNvbXB1dGVkUGVyaW9kID0gcGVyaW9kO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLmVycm9yVGhyZXNob2xkID0gZXJyb3JUaHJlc2hvbGQ7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLmdldFRpbWUgPSBnZXRUaW1lRnVuY3Rpb24oKTtcblxuICAgIHRoaXMuX3RpY2sgPSB0aGlzLl90aWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUGVyaW9kIG9mIHRoZSB0aW1lci4gTXVzdCBiZSBhbiBpbnRlZ2VyLCB0aGUgZ2l2ZW4gdmFsdWUgaXMgZmxvb3JlZC5cbiAgICogV2hlbiB1cGRhdGVkIHRoZSBuZXcgdmFsdWUgaXMgYXBwbGllZCBhdCB0aGUgbmV4dCB0aWNrLlxuICAgKlxuICAgKiBAbmFtZSBwZXJpb2RcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQGluc3RhbmNlXG4gICAqIEBtZW1iZXJvZiBUaWNrZXJcbiAgICovXG4gIHNldCBwZXJpb2QodmFsdWUpIHtcbiAgICB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpO1xuICAgIHRoaXMubG9naWNhbFBlcmlvZCA9IHZhbHVlO1xuICAgIHRoaXMuY29tcHV0ZWRQZXJpb2QgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwZXJpb2QoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naWNhbFBlcmlvZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCB0aGUgdGlja2VyIGluc3RhbmNlLlxuICAgKi9cbiAgc3RhcnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgdGhpcy5zdGFydFRpbWUgPSB0aGlzLmdldFRpbWUoKTtcbiAgICAgIHRoaXMubG9naWNhbFRpbWUgPSAwO1xuXG4gICAgICB0aGlzLl90aWNrKCk7IC8vIHJ1biBub3dcblxuICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSB0aWNrZXIgaW5zdGFuY2UuXG4gICAqL1xuICBzdG9wKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBfdGljaygpIHtcbiAgICBjb25zdCBub3cgPSB0aGlzLmdldFRpbWUoKTtcbiAgICBjb25zdCB0aW1lID0gbm93IC0gdGhpcy5zdGFydFRpbWU7XG4gICAgY29uc3QgZXJyb3IgPSB0aW1lIC0gdGhpcy5sb2dpY2FsVGltZTtcblxuICAgIGlmIChlcnJvciA+PSB0aGlzLmVycm9yVGhyZXNob2xkKVxuICAgICAgdGhpcy5jb21wdXRlZFBlcmlvZCA9IHRoaXMuY29tcHV0ZWRQZXJpb2QgLSAxO1xuXG4gICAgaWYgKGVycm9yIDwgLXRoaXMuZXJyb3JUaHJlc2hvbGQpXG4gICAgICB0aGlzLmNvbXB1dGVkUGVyaW9kID0gdGhpcy5sb2dpY2FsUGVyaW9kO1xuXG4gICAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KHRoaXMuX3RpY2ssIHRoaXMuY29tcHV0ZWRQZXJpb2QpO1xuXG4gICAgdGhpcy5jYWxsYmFjayh0aGlzLmxvZ2ljYWxUaW1lLCBub3csIGVycm9yKTtcbiAgICAvLyBuZXh0IGNhbGwgdGltZVxuICAgIHRoaXMubG9naWNhbFRpbWUgKz0gdGhpcy5sb2dpY2FsUGVyaW9kO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpY2tlcjtcbiJdfQ==